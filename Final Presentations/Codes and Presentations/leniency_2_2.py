# -*- coding: utf-8 -*-
"""Leniency 2/2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fx9Dp2Valyyjy2SnJTHEmbDe1NGYM40y
"""

import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt

# Fonction pour vérifier la présence des balises dans une décision
def check_decision(decision_url):
    response = requests.get(decision_url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')

        # Recherche de la balise de l'article CA98
        ca98_link = soup.find("a", href="/cma-cases?case_type%5B%5D=ca98-and-civil-cartels")

        # Recherche de la balise contenant le mot "leniency"
        leniency_tags = soup.find_all("p", string=lambda text: text and "leniency" in text.lower())

        # Recherche de la balise CA98 - infringement Chapter I
        ca98_infringement_link = soup.find("a", href="/cma-cases?outcome_type%5B%5D=ca98-infringement-chapter-i")

        # Vérification de la présence des balises
        ca98_present = ca98_link is not None
        leniency_present = len(leniency_tags) > 0
        ca98_infringement_present = ca98_infringement_link is not None

        return ca98_present, leniency_present, ca98_infringement_present
    else:
        print("Échec de la requête pour la décision :", decision_url)
        return False, False, False

# URL de la page principale
main_url = "https://www.gov.uk/cma-cases?"
params = {"page": 1}

# Initialisation des compteurs
ca98_true_count = 0
leniency_true_count = 0
ca98_infringement_true_count = 0
all_true_count = 0

# Parcourir toutes les pages
while True:
    response = requests.get(main_url, params=params)

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')

        # Récupérer les liens des décisions sur la page
        decision_links = [link["href"] for link in soup.find_all("a", {"data-ga4-ecommerce-path": True})]

        # Vérifier chaque décision
        for decision_link in decision_links:
            decision_url = "https://www.gov.uk" + decision_link
            ca98_present, leniency_present, ca98_infringement_present = check_decision(decision_url)

            # Mise à jour des compteurs si la présence est True
            if ca98_present:
                ca98_true_count += 1
            if leniency_present:
                leniency_true_count += 1
            if ca98_infringement_present:
                ca98_infringement_true_count += 1

            # Vérification si les trois éléments sont True
            if ca98_present and leniency_present and ca98_infringement_present:
                all_true_count += 1
                print("Décision satisfaisant toutes les conditions :", decision_url)

        # Vérifier s'il y a une page suivante
        next_page_link = soup.find("a", {"rel": "next"})
        if next_page_link:
            params = {"page": int(next_page_link["href"].split("=")[-1])}
        else:
            break
    else:
        print("Échec de la requête pour la page :", params["page"])
        break

# Affichage des résultats
print("Nombre total de décisions de cartels civils :", ca98_true_count)
print("Nombre total de décisions avec la présence de 'leniency' :", leniency_true_count)
print("Nombre total de décisions d'infractions CA98 :", ca98_infringement_true_count)
print("Nombre total de décisions clémence sous cartel :", all_true_count)

# Création du graphique à barres
categories = ["Civil cartels", "CA98", "Cartels under leniency"]
counts = [ca98_true_count, ca98_infringement_true_count, leniency_true_count]

plt.bar(categories, counts, color=['red', 'green', 'blue'])
plt.xlabel('Éléments')
plt.ylabel('Nombre de décisions')
plt.title('Nombre de décisions avec chaque élément présent')
plt.show()