print("GENERATING URLS") #we generate a list for all the urls we are going to request
root_url = 'https://www.conseil-constitutionnel.fr/les-decisions?page=' # to go on the website and browse the needed pages
url_list = []
for x in range(1, 315):
    url_list.append(root_url + str(x))

from bs4 import BeautifulSoup
import requests
scrape_results = []

print("SCRAPING THE URLS")
for id, url in enumerate(url_list):
    print(f"URL #{id}/{len(url_list)}")
    webpage = requests.get(url)

    soup = BeautifulSoup(webpage.content)
    set_decisions = soup.find_all("article")

    # We create a loop that will extract the precise element we want from the first element. For that we use regex.
    for decision in set_decisions:
        decisions = decision.find("div", class_="title").text
        scrape_results.append(decisions)


print(f"We found a total of {len(scrape_results)} decisions")
print(f"The first one is: '{scrape_results[0]}'")

# Importing packages
import regex as re

# 1. Converting the dates in the website format into a format compatible with the regexes

# to turn the month in text into a number
month_dictionary = {
    'janvier': '1',
    'février': '2',
    'mars': '3',
    'avril': '4',
    'mai': '5',
    'juin': '6',
    'juillet':'7',
    'août': '8',
    'septembre': '9',
    'octobre': '10',
    'novembre': '11',
    'décembre': '12'}


list_dates = []  # to store the processed dates
for text in scrape_results:
    words = text.split(' ')  # split the ruling into its words

    for word in words:
        if word == '':
            words.remove(word)  # problem where sometimes the last word is '' instead of the year

    # the last three words are always day month year
    year = words[-1]
    month = month_dictionary[words[-2]]
    day = words[-3]

    if day == '1er':  # we don't want to have '1er' but 1
        day = '1'


    date = day + '/' + month + '/' + year  # make the date
    list_dates.append(date)  # add it to results

print('We converted ', {len(list_dates)}, ' dates.')
print('First one is ', {list_dates[0]})
print('Last one is ',  {list_dates[-1]})


# 2. Divide the list of decision dates from the website into time frames according to whether they are before elections or not

#post: pas avant les élections
#pre: 4 mois avant une élection présidentielle

#5 mai 2002
#Post1: 1/1/2002 - 5/1/2002 → \b(?:01/01/2002|05/01/2002)\b
#Pre1: 6/1/2002 - 5/5/2002

#6 mai 2007
#Post 2: 6/5/2002 - 6/1/2007
#Pre 2: 7/1/2007 - 6/5/2007

#6 mai 2012
#Post 3: 7/5/2007 - 6/1/2012
#Pre 3: 7/1/2012 - 6/5/2012

#7 mai 2017
#Post 4: 7/5/2012 -7/1/2017
#Pre 4: 8/1/2017 - 7/5/2017

#24 avril 2022
#Post 5: 8/5/2017 - 24/1/2022
#Pre 5: 25/1/2022 - 24/5/2022

#Post 6: 25/5/2022 - 9/11/2022

print("FILTERING DATES")

#Election du 5 mai 2002
#Post1: 1/1/2002 - 5/1/2002
r = re.compile("[1-5]/1/2002")
filtered_list_1 = list(filter(r.match, list_dates))
print("Post1: 1/1/2002 - 5/1/2002", filtered_list_1)

#Pre1: 6/1/2002 - 5/5/2002
r = re.compile("([1-9]|[12][0-9]|3[01])/[2-4]/2002|"
               "([6-9]|[12][0-9]|3[01])/1/2002|"
               "[1-5]/5/2002")
filtered_list_A = list(filter(r.match, list_dates))
print("Pre1: 6/1/2002 - 5/5/2002", filtered_list_A)

# Election du 6 mai 2007
# Post 2: 6/5/2002 - 6/1/2007
r = re.compile("(3[01]|[12][0-9]|[6-9])/5/2002|"
                "([1-9]|[12][0-9]|3[01])/([6-9]|1[0-2])/2002|"
                "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2003|"
                "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2004|"
                "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2005|"
                "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2006|"
                "[1-6]/1/2007")
filtered_list_2 = list(filter(r.match, list_dates))
print("Post 2: 6/5/2002 - 6/1/2007", filtered_list_2)

#Pre 2: 7/1/2007 - 6/5/2007
r = re.compile("([1-9]|[12][0-9]|3[01])/[2-4]/2007|"
               "([7-9]|[12][0-9]|3[01])/1/2007|"
               "[1-6]/5/2007")
filtered_list_B = list(filter(r.match, list_dates))
print("Pre 2: 7/1/2007 - 6/5/2007", filtered_list_B)


# Election du 6 mai 2012
#Post 3: 7/5/2007 - 6/1/2012
r = re.compile("(3[01]|[12][0-9]|[7-9])/5/2007|"
               "([1-9]|[12][0-9]|3[01])/([6-9]|1[0-2])/2007|"
               "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2008|"
               "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2009|"
               "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2010|"
               "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2011|"
               "[1-6]/1/2012")
filtered_list_3 = list(filter(r.match, list_dates))
print("Post 3: 7/5/2007 - 6/1/2012", filtered_list_3)

#Pre 3: 7/1/2012 - 6/5/2012
r = re.compile("([1-9]|[12][0-9]|3[01])/[2-4]/2012|"
               "([7-9]|[12][0-9]|3[01])/1/2012|"
               "[1-6]/5/2012")
filtered_list_C = list(filter(r.match, list_dates))
print("Pre 3: 7/1/2012 - 6/5/2012", filtered_list_C)

#7 mai 2017
#Post 4: 7/5/2012 -7/1/2017
r = re.compile("(3[01]|[12][0-9]|[7-9])/5/2012|"
               "([1-9]|[12][0-9]|3[01])/([6-9]|1[0-2])/2012|"
               "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2013|"
               "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2014|"
               "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2015|"
               "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2016|"
               "[1-7]/1/2017")
filtered_list_4 = list(filter(r.match, list_dates))
print("Post 4: 7/5/2012 -7/1/2017", filtered_list_4)

#Pre 4: 8/1/2017 - 7/5/2017
r = re.compile("([1-9]|[12][0-9]|3[01])/[2-4]/2017|"
               "([8-9]|[12][0-9]|3[01])/1/2017|"
               "[1-7]/5/2017")
filtered_list_D = list(filter(r.match, list_dates))
print("Pre 4: 8/1/2017 - 7/5/2017", filtered_list_D)

# Election of 24 avril 2022
#Post 5: 8/5/2017 - 24/1/2022
r = re.compile("(3[01]|[12][0-9]|[8-9])/5/2017|"
               "([1-9]|[12][0-9]|3[01])/([6-9]|1[0-2])/2017|"
               "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2018|"
               "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2019|"
               "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2020|"
               "([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/2021|"
               "([0-9]|1[0-9]|2[0-4])/1/2022")
filtered_list_5 = list(filter(r.match, list_dates))
print("Post 5: 8/5/2017 - 24/1/2022", filtered_list_5)

#Pre 5: 25/1/2022 - 24/5/2022
r = re.compile("(([1-9]|[12][0-9]|3[01])/[2-4]/2022)|"
               "((2[5-9]|3[01])/1/2022)|"
               "(([1-9]|1[0-9]|2[0-4])/5/2022)")
filtered_list_E = list(filter(r.match, list_dates))
print("Pre 5: 25/1/2022 - 24/5/2022", filtered_list_E)

#Post 6: 25/5/2022 - 9/11/2022 (V: Those in are correct but missing some months)
r = re.compile("([1-9]|[12][0-9]|3[01])/[6-9]/2022|([1-9]|[12][0-9]|3[01])/10/2022|([9|[12][0-9]|3[01])/11/2022|(2[5-9]|3[01])/5/2022")
filtered_list_6 = list(filter(r.match, list_dates))
print("Post 6: 25/5/2022 - 9/11/2022", filtered_list_6)

# all dates before 2002
r = re.compile("([1-9]|[12][0-9]|3[01])/([1-9]|1[0-2])/((19[5-9][0-9])|2000|2001)")
dates_not_included = list(filter(r.match, list_dates))
print("dates_not_included: ", len(dates_not_included), dates_not_included)


# 3. Compiling it all into a mega list

Post_Mega_List = filtered_list_1 + filtered_list_2 + filtered_list_3 + filtered_list_4 + filtered_list_5 + filtered_list_6

Pre_Mega_List = filtered_list_A + filtered_list_B + filtered_list_C + filtered_list_D + filtered_list_E

# 4. Making both lists comparable

# Working with the list of decisions not before an election
Post_Mega_List_length = len(Post_Mega_List)
Post_Mega_List_length_Adapted = Post_Mega_List_length/14
print("Post Mega: ", Post_Mega_List)
print("PostMega length adapted: ", Post_Mega_List_length_Adapted)

# The Post list is divided by 14 because the period between elections is 56 months long, as opposed to the period before elections, which is 4 months long. 56/4= 14. Thus, we divide the in between election period by 14.


# Working with the list of decisions before an election
Pre_Mega_List_length = len(Pre_Mega_List)
print("Pre Mega: ", Pre_Mega_List)
print("Pre Mega length: ", Pre_Mega_List_length)

# check all dates are present

for date in list_dates:
    if date not in Pre_Mega_List and date not in Post_Mega_List and date not in dates_not_included:
        print(date)

print("Total Dates: ", len(list_dates))
print("Dates in Post: ", Post_Mega_List_length)
print("Dates in Pre: ", Pre_Mega_List_length)
print("Dates not considered: ", len(dates_not_included))

# Comparing the lists
if Pre_Mega_List_length < Post_Mega_List_length_Adapted:
    print("The conseil constitutionnel slows its decision rhythm before presidential elections")
else:
    print("The conseil constitutionnel does not slow its decision rhythm before presidential elections")