#1
ans = my_dict[1] + " " + my_list[-2]

#2 - 6
answer = 0
list_fifth_para = fifth_para.split(" ")
list_sixth_para = sixth_para.split(" ")

intersect = set(list_fifth_para).intersection(set(list_sixth_para))
answer = len(intersect)

#3 -

num_words = 0
for line in poem.split("\n"):
    if "cake" in line:
        num_words += 1
        if "knife" in line:
            num_words += 1
    elif "knife" in line:
        num_words += 1
answer = num_words

#4 - 41

os.chdir("../Data Storage/Gibberish")
for file in os.listdir("."):
    if len(file) == 26:
        os.rename(file, file[:-4] + "_main" + ".txt")
        answer += 1

#5 - 42

for file in os.listdir("."):
    with open(file, "r", encoding="utf8") as f:
        text = f.read()
        if text[:7] == "ANSWER=":
            answer = text[7:9]
            break

#6 - 1.1

answer = ""   # set answer to correct value after writing relevant code

longest_line = ""
for line in re.split(r"\n", poem):
    if re.search("ake", line) and re.search("[A-Z]", re.sub(r"^[\d \.]+", "", line[6:])) is None:
        len_line = len(re.findall(r"\w+", line[3:]))
        len_e = len(re.findall("e", line))
        if len_line in [3, 5, 7] and len_e > len(re.findall(r"e", longest_line)):
            longest_line = line

answer = longest_line[:3]

#7 

print(sorted([line for line in re.split(r"\n", poem)[1:] if re.search("ake", line) and re.search("[A-Z]", re.sub(r"^[\d \.]+", "", line[6:])) is None and len(re.findall(r"\w+", line.strip()[3:])) in [3,5,7]], key=len, reverse=True)[0][:3])

# 8
df = pd.read_csv("BIT Data.csv", header="infer")
for index, row in df.iterrows():
    for x in range(1, 55):
        if "Copenhagen" in row["Article " + str(x)]:
            print(index, "Article " + str(x))

subdf = df.apply(lambda row: row.astype(str).str.contains('Copenhagen').any(), axis=1)
subdf[subdf == True].index[0]